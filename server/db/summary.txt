Summary
-------

This folder handles the interactions with the database. It currently allows for
read, write, update, and remove functions to be used on the dataSets collection.
The database we use is the mongodb basic database and mySQL without any ORM.  

The dataSets collection stores the large chunks of data that we pull from the
various politiical data APIs. Each document has a dataSetName and data. The 
can be accessed and updated by their dataSetName.

The SQL schema stores data pulled from the FEC in the form of txt files. All candidate 
financial information comes from the SQL database.

-----------------------------------------------------------------------------
How to Import txt data into SQL database
-----------------------------------------------------------------------------
1. CD to DB folder.
2. Run 'mysql -u root < schema.sql;' from command line.
3. Run 'mysql --local-infile=1 -u root PoliticalData;'
4. Import data with 'LOAD DATA LOCAL INFILE '**path to txt file**' INTO TABLE *tablename* 
FIELDS TERMINATED BY '|' LINES TERMINATED BY '\n';'
*Note* -- must re-open database connection with step 3 each time.

-----------------------------------------------------------------------------
SQLInteractor.js Exported Functions
-----------------------------------------------------------------------------
**Note** Only using getCandidateFinanceData + ""ByName in this implimentation. We've left the other
query functions as reference. 

init --------------
	initializes the JoinedData table with information from candidates, cont_to_cand, and committees to reduce client
	side waiting time. 

getContributions(callback) -----------
	gets candidate name and party affiliation, committee name, total transactions, and what office the 
	candidate is running for from joinedData. Once the data has been retrieved, the callback is 
	executed on the data. 

getCandidateById(candName, callback) -----------
	gets given candidate name and party affiliation, committee name, total transactions, and what office the candidate is running for from joinedData. Once the data has been retrieved, the callback is 
	executed on the data. 

getCandidateFinanceData(callback) --------------
	this function returns a table with candidate name and party and total financial contributions, including a join with the candidate table in order to retrieve what the candidate is running for. Once data has been retrieved, the callback is be executed on the data.

getCandidateFinanceDataByName(candName, callback) --------------
	this function returns a table with the given candidate name and party and total financial contributions, including a join with the candidate table in order to retrieve what the candidate is running for. Once data has been retrieved, the callback is be executed on the data

-----------------------------------------------------------------------------
databaseInteractor.js Exported Functions
-----------------------------------------------------------------------------
**Note** Only using findDataSet in this implimentation. We've left the other helper functions 
just as reference.

addDataSet(data, dataSetName, callback)-----------------------------
	This function takes in data and dataSetName that you wish to add to the
	database. It then executes the callback upon the data being succesfuly
	stored in the database. 

updateDataSet(data, dataSetName, callback)--------------------------
	This function allows dataSets to be replaced with new data. This function
	will execute the callback once the data has been successfuly replaced. 

findDataSet(dataSetName, callback)----------------------------------
	This function searches the database for data matching the given dataSetName.
	It will call the callback once completed with all the data provided as the
	first argument.
	
clearCollection(callback)-------------------------------------------
	This function is meant primarily for development. It clears out the 
	dataSets collection when invoked. 

--------------------------------------------------------------------------------
databaseController.js Exported Functions
--------------------------------------------------------------------------------
**Note** Only using findDataSet in this implimentation. We've left the other helper functions 
just as reference.


addDataSet(req,res,next)---------------------------------------------
	This middleware acts on POST requests on /dataSets and adds the new dataSet
	to the collection using addDataSet in dataSets.js
	
updateDataSet(req,res,next)------------------------------------------
	This middleware acts on POST requests to /dataSets/:dataSetName and 
	replaces the old dataSet in the collection using updateDataSet in dataSets.
	js

findDataSet(req,res,next)--------------------------------------------
	This middleware acts on GET requests to /dataSets and returns the dataSet 
	from the collection using findDataSet in dataSets.js

clearCollection(req,res,next)----------------------------------------
	This middleware acts on POST requests to /dataSets/clearand removes all the 
	dataSets from the collection using clearCollection in dataSets.js